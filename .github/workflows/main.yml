name: Deployment pull request workflow
on:
  push:
    branches:
      - deployment

jobs:
  tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13.10
        env:
          POSTGRES_USER: django_user
          POSTGRES_PASSWORD: django_password
          POSTGRES_DB: django_db
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip 
        pip install -r talent_reserves/requirements.txt
    - name: Test with flake8 and django tests
      env:
        POSTGRES_USER: django_user
        POSTGRES_PASSWORD: django_password
        POSTGRES_DB: django_db
        DB_HOST: 127.0.0.1
        DB_PORT: 5432
      run: |
        python -m flake8 talent_reserves/
        pytest
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repo
      uses: actions/checkout@v3
#     - name: Setup SSH Keys and known_hosts
#       env:
#         SSH_AUTH_SOCK: /tmp/ssh_agent.sock
#       run: |
#         ssh-agent -a $SSH_AUTH_SOCK > /dev/null
#         ssh-add - <<< "${{ secrets.SSH_PRIVATE_KEY }}"
    - name: Setup SSH and Pull Repository
      run: |
        eval "$(ssh-agent -s)"
        echo "${{ secrets.SSH_PRIVATE_KEY }}" | ssh-add -
        ssh -Tv ${{ secrets.USER }}@${{ secrets.HOST }}
    - name: Executing ssh commands to deploy
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        passphrase: ${{ secrets.SSH_PASSPHRASE }}
        script: |
          cd backend/deploy
          git pull
          docker compose -f docker-compose.production.yml down -v
          docker compose -f docker-compose.production.yml up -d
          docker compose -f docker-compose.production.yml exec backend python manage.py migrate
          docker compose -f docker-compose.production.yml exec backend python manage.py collectstatic --noinput
